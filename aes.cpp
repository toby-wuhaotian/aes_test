#include <vector>
#include <cstdint>
#include <iostream>

using namespace std;

const uint8_t sbox[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
		0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
		0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
		0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
		0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
		0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
		0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
		0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
		0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
		0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
		0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
		0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
		0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
		0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

const uint8_t rsbox[256] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

class AesEncryption
{
public:
	AesEncryption(const std::vector<uint8_t>& key);
	std::vector<uint8_t> encrypt(const std::vector<uint8_t>& plaintext);

private:
	void keyExpansion(const std::vector<uint8_t>& key);
	void subBytes(std::vector<uint8_t>& state);
	void shiftRows(std::vector<uint8_t>& state);
	void mixColumns(std::vector<uint8_t>& state);
	uint8_t gfmultby02(uint8_t b);
	uint8_t gfmultby03(uint8_t b);
	uint8_t gfmultby09(uint8_t b);
	uint8_t gfmultby0b(uint8_t b);
	uint8_t gfmultby0d(uint8_t b);
	uint8_t gfmultby0e(uint8_t b);

	std::vector<uint8_t> m_key;
	int m_nk;
	int m_nr;
};

AesEncryption::AesEncryption(const std::vector<uint8_t>& key)
{
	m_key = key;

	switch (m_key.size())
	{
	case 16:
		m_nk = 4;
		m_nr = 10;
		break;
	case 24:
		m_nk = 6;
		m_nr = 12;
		break;
	case 32:
		m_nk = 8;
		m_nr = 14;
		break;
	default:
		throw std::invalid_argument("Invalid key size");
	}

	keyExpansion(m_key);
}
std::vector<uint8_t> AesEncryption::encrypt(const std::vector<uint8_t>& plaintext)
{
	if (plaintext.size() % 16 != 0)
	{
		throw std::invalid_argument("Invalid plaintext size");
	}

	std::vector<uint8_t> ciphertext(plaintext.size());

	for (size_t i = 0; i < plaintext.size(); i += 16)
	{
		std::vector<uint8_t> state(plaintext.begin() + i, plaintext.begin() + i + 16);

		// AddRoundKey
		for (int j = 0; j < 16; j++)
		{
			state[j] ^= m_key[j];
		}

		// Round 1 to Round N-1
		for (int round = 1; round < m_nr; round++)
		{
			subBytes(state);
			shiftRows(state);
			mixColumns(state);

			// AddRoundKey
			for (int j = 0; j < 16; j++)
			{
				state[j] ^= m_key[round * 16 + j];
			}
		}

		// Round N
		subBytes(state);
		shiftRows(state);

		// AddRoundKey
		for (int j = 0; j < 16; j++)
		{
			state[j] ^= m_key[m_nr * 16 + j];
		}

		std::copy(state.begin(), state.end(), ciphertext.begin() + i);
	}

	return ciphertext;
}
void AesEncryption::keyExpansion(const std::vector<uint8_t>& key)
{
	std::vector<uint8_t> temp(4);
	std::vector<uint8_t> rcon(4);
	int nk = key.size() / 4;
	int nr = nk + 6;
	int i;

	for (i = 0; i < nk; i++)
	{
		m_key[4 * i] = key[4 * i];
		m_key[4 * i + 1] = key[4 * i + 1];
		m_key[4 * i + 2] = key[4 * i + 2];
		m_key[4 * i + 3] = key[4 * i + 3];
	}

	for (i = nk; i < 4 * (nr + 1); i++)
	{
		temp[0] = m_key[4 * (i - 1)];
		temp[1] = m_key[4 * (i - 1) + 1];
		temp[2] = m_key[4 * (i - 1) + 2];
		temp[3] = m_key[4 * (i - 1) + 3];

		if (i % nk == 0)
		{
			// RotWord operation
			uint8_t t = temp[0];
			temp[0] = temp[1];
			temp[1] = temp[2];
			temp[2] = temp[3];
			temp[3] = t;

			// SubWord operation
			temp[0] = sbox[temp[0]];
			temp[1] = sbox[temp[1]];
			temp[2] = sbox[temp[2]];
			temp[3] = sbox[temp[3]];

			// Rcon operation
			rcon[0] = rcon[i / nk];
			rcon[1] = 0;
			rcon[2] = 0;
			rcon[3] = 0;

			temp[0] ^= rcon[0];
		}
		else if (nk > 6 && i % nk == 4)
		{
			// SubWord operation
			temp[0] = sbox[temp[0]];
			temp[1] = sbox[temp[1]];
			temp[2] = sbox[temp[2]];
			temp[3] = sbox[temp[3]];
		}

		m_key[4 * i] = m_key[4 * (i - nk)] ^ temp[0];
		m_key[4 * i + 1] = m_key[4 * (i - nk) + 1] ^ temp[1];
		m_key[4 * i + 2] = m_key[4 * (i - nk) + 2] ^ temp[2];
		m_key[4 * i + 3] = m_key[4 * (i - nk) + 3] ^ temp[3];
	}
}
void AesEncryption::subBytes(std::vector<uint8_t>& state)
{
	for (int i = 0; i < 16; i++)
	{
		state[i] = sbox[state[i]];
	}
}

void AesEncryption::shiftRows(std::vector<uint8_t>& state)
{
	uint8_t temp;

	// Row 1
	temp = state[1];
	state[1] = state[5];
	state[5] = state[9];
	state[9] = state[13];
	state[13] = temp;

	// Row 2
	temp = state[2];
	state[2] = state[10];
	state[10] = temp;
	temp = state[6];
	state[6] = state[14];
	state[14] = temp;

	// Row 3
	temp = state[15];
	state[15] = state[11];
	state[11] = state[7];
	state[7] = state[3];
	state[3] = temp;
}

void AesEncryption::mixColumns(std::vector<uint8_t>& state)
{
	uint8_t s0, s1, s2, s3;

	for (int i = 0; i < 16; i += 4)
	{
		s0 = state[i];
		s1 = state[i + 1];
		s2 = state[i + 2];
		s3 = state[i + 3];

		state[i] = gfmultby02(s0) ^ gfmultby03(s1) ^ s2 ^ s3;
		state[i + 1] = s0 ^ gfmultby02(s1) ^ gfmultby03(s2) ^ s3;
		state[i + 2] = s0 ^ s1 ^ gfmultby02(s2) ^ gfmultby03(s3);
		state[i + 3] = gfmultby03(s0) ^ s1 ^ s2 ^ gfmultby02(s3);
	}
}

uint8_t AesEncryption::gfmultby02(uint8_t b)
{
	if (b < 0x80)
	{
		return b << 1;
	}
	else
	{
		return (b << 1) ^ 0x1b;
	}
}

uint8_t AesEncryption::gfmultby03(uint8_t b)
{
	return gfmultby02(b) ^ b;
}

uint8_t AesEncryption::gfmultby09(uint8_t b)
{
	return gfmultby02(gfmultby02(gfmultby02(b))) ^ b;
}

uint8_t AesEncryption::gfmultby0b(uint8_t b)
{
	return gfmultby02(gfmultby02(gfmultby02(b))) ^ gfmultby02(b) ^ b;
}

uint8_t AesEncryption::gfmultby0d(uint8_t b)
{
	return gfmultby02(gfmultby02(gfmultby02(b))) ^ gfmultby02(gfmultby02(b)) ^ (b);
}

uint8_t AesEncryption::gfmultby0e(uint8_t b)
{
	return gfmultby02(gfmultby02(gfmultby02(b))) ^ gfmultby02(gfmultby02(b)) ^ gfmultby02(b);
}